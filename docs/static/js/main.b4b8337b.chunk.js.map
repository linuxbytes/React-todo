{"version":3,"sources":["Header.js","Item.js","App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","Items","type","checked","this","props","done","text","App","state","items","handleChange","bind","handleSubmit","toggleTodo","event","setState","newItemValue","target","value","preventDefault","slice","push","index","item","onSubmit","placeholder","onChange","map","Item","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAQeA,E,uKAJX,OAAO,0C,GAFUC,IAAMC,WCaZC,E,uKAXX,OACE,4BACE,+BACE,2BAAOC,KAAK,WAAWC,QAASC,KAAKC,MAAMC,OAAQ,IACnD,8BAAOF,KAAKC,MAAME,Y,GANRR,IAAMC,WC+EXQ,G,wDAzEb,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IACDI,MAAQ,CACXC,MAAO,CACL,CACEH,KAAM,aACND,MAAM,GAER,CACEC,KAAM,cACND,MAAM,KAIZ,EAAKK,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAhBD,E,yDAmBNG,GACXX,KAAKY,SAAS,CAAEC,aAAcF,EAAMG,OAAOC,U,mCAGhCJ,GACXA,EAAMK,iBAEN,IAAIV,EAAQN,KAAKK,MAAMC,MAAMW,QAE7BX,EAAMY,KAAK,CACTf,KAAMH,KAAKK,MAAMQ,aACjBX,MAAM,IAGRF,KAAKY,SAAS,CACZC,aAAc,GACdP,MAAOA,M,iCAIAa,GACT,IAAIb,EAAQN,KAAKK,MAAMC,MAAMW,QAEzBG,EAAOd,EAAMa,GACjBC,EAAKlB,MAAQkB,EAAKlB,KAElBF,KAAKY,SAAS,CACZN,MAAOA,M,+BAKT,OACE,6BACE,kBAAC,EAAD,MACA,0BAAMe,SAAUrB,KAAKS,cACnB,2BACEX,KAAK,OACLiB,MAAOf,KAAKK,MAAMQ,aAClBS,YAAY,cACZC,SAAUvB,KAAKO,eAEjB,2BAAOT,KAAK,SAASiB,MAAM,cAE7B,4BACGf,KAAKK,MAAMC,MAAMkB,KAAI,SAACJ,GAAD,OACpB,kBAACK,EAAD,CAAMC,IAAKN,EAAKO,GAAIzB,KAAMkB,EAAKlB,KAAMC,KAAMiB,EAAKjB,gB,GAlE1CR,IAAMC,YCKJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b4b8337b.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return <h1>Todos:</h1>;\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nclass Items extends React.Component {\n  render() {\n    return (\n      <li>\n        <label>\n          <input type=\"checkbox\" checked={this.props.done || false} />\n          <span>{this.props.text}</span>\n        </label>\n      </li>\n    );\n  }\n}\n\nexport default Items;\n","import React from \"react\";\n\nimport Header from \"./Header.js\";\nimport Item from \"./Item.js\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [\n        {\n          text: \"First Todo\",\n          done: false,\n        },\n        {\n          text: \"Second Todo\",\n          done: true,\n        },\n      ],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleTodo = this.toggleTodo.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ newItemValue: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    let items = this.state.items.slice();\n\n    items.push({\n      text: this.state.newItemValue,\n      done: false,\n    });\n\n    this.setState({\n      newItemValue: \"\",\n      items: items,\n    });\n  }\n\n  toggleTodo(index) {\n    let items = this.state.items.slice();\n\n    let item = items[index];\n    item.done = !item.done;\n\n    this.setState({\n      items: items,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            value={this.state.newItemValue}\n            placeholder=\"New todo...\"\n            onChange={this.handleChange}\n          />\n          <input type=\"submit\" value=\"Add Item\" />\n        </form>\n        <ol>\n          {this.state.items.map((item) => (\n            <Item key={item.id} done={item.done} text={item.text} />\n          ))}\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}